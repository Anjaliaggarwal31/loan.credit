# -*- coding: utf-8 -*-
"""loan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S1T8y2qZ7avZZr1fmU7judXmVjLbIbo6
"""

import streamlit as st
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer

# --- LOAD DATA ---
df = pd.read_csv("loan dataset.csv")

# Drop Loan_ID (not useful for prediction)
df.drop(columns=['Loan_ID'], inplace=True)

# Handle missing values
imputer = SimpleImputer(strategy="most_frequent")
df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

# Encode categorical variables
label_encoders = {}
for col in df_imputed.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df_imputed[col] = le.fit_transform(df_imputed[col])
    label_encoders[col] = le

# Feature and target
X = df_imputed.drop(columns=["Credit_History"])  # Assuming Credit_History is target
y = df_imputed["Credit_History"].astype(int)

# Train model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Save model and encoders
joblib.dump(model, "loan_model.pkl")
joblib.dump(label_encoders, "loan_label_encoders.pkl")

# --- STREAMLIT PAGE ---
st.set_page_config(page_title="Loan Eligibility Checker", layout="centered")
st.title("üè¶ Loan Eligibility Checker")

st.markdown("### Fill out the form below to check your loan eligibility:")

# --- USER INPUT FORM ---
def user_form():
    gender = st.selectbox("Gender", ['Male', 'Female'])
    married = st.selectbox("Married", ['Yes', 'No'])
    dependents = st.selectbox("Dependents", ['0', '1', '2', '3+'])
    education = st.selectbox("Education", ['Graduate', 'Not Graduate'])
    self_employed = st.selectbox("Self Employed", ['Yes', 'No'])
    applicant_income = st.number_input("Applicant Income", min_value=0)
    coapplicant_income = st.number_input("Co-applicant Income", min_value=0)
    loan_amount = st.number_input("Loan Amount (in thousands)", min_value=10.0)
    loan_term = st.selectbox("Loan Term (in months)", [360, 300, 240, 180, 120, 60])
    property_area = st.selectbox("Property Area", ['Urban', 'Semiurban', 'Rural'])

    return {
        'Gender': gender,
        'Married': married,
        'Dependents': dependents,
        'Education': education,
        'Self_Employed': self_employed,
        'ApplicantIncome': applicant_income,
        'CoapplicantIncome': coapplicant_income,
        'LoanAmount': loan_amount,
        'Loan_Amount_Term': loan_term,
        'Property_Area': property_area
    }

user_data = user_form()

if st.button("üîç Check Eligibility"):
    model = joblib.load("loan_model.pkl")
    label_encoders = joblib.load("loan_label_encoders.pkl")

    input_df = pd.DataFrame([user_data])

    # Encode input
    for col in input_df.select_dtypes(include='object').columns:
        if col in label_encoders:
            input_df[col] = label_encoders[col].transform(input_df[col])

    # Ensure correct order
    input_df = input_df[X.columns]  # Align with model's features

    prediction = model.predict(input_df)[0]

    if prediction == 1:
        st.success("‚úÖ You are likely eligible for the loan!")
    else:
        st.error("‚ùå You are likely not eligible for the loan based on this information.")

st.markdown("---")